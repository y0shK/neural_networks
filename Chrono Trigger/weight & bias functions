import numpy as np

def sigmoid(x):
    return 1/(1+np.exp(-x))

def computeWeights(x1, x2, x3, bigArray, hp_slot, mp_slot, phys_slot, mag_slot):
    small1 = bigArray[x1]
    small2 = bigArray[x2]
    small3 = bigArray[x3]

    hp_mp1 = small1[hp_slot] + small1[mp_slot]
    hp_mp2 = small2[hp_slot] + small2[mp_slot]
    hp_mp3 = small3[hp_slot] + small3[mp_slot]

    atk1 = small1[phys_slot] + small1[mag_slot]
    atk2 = small2[phys_slot] + small2[mag_slot]
    atk3 = small3[phys_slot] + small3[mag_slot]

    hpmp = hp_mp1 + hp_mp2 + hp_mp3
    stat = atk1 + atk2 + atk3
    computeWeights.totalStat = hpmp + stat

    #totalStat will be a number in the hundreds
    #since we are using a sigmoid, the number needs to be between 0 and 1
    computeWeights.totalStat = computeWeights.totalStat / 1000

    #print(str(computeWeights.totalStat))
    return computeWeights.totalStat

def computeBias(x1, x2, x3, bigArray, slot):
    small1 = bigArray[x1]
    small2 = bigArray[x2]
    small3 = bigArray[x3]

    num1 = small1[slot]
    num2 = small2[slot]
    num3 = small3[slot]
    computeBias.stat = num1 + num2 + num3

    #stat will have double digits
    #since we are using a sigmoid, the number needs to be bounded by 0 and 1
    computeBias.stat = computeBias.stat / 100

    #print(str(computeBias.stat))
    return computeBias.stat
